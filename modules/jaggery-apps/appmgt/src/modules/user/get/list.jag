<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log('modules/user/get/list.jag');

var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var appfactory = require('appFactory');
var multitenancy = carbon.multitenancy;

function login(userName, password){
	var tenantDomain = SUPER_TENANT_DOMAIN_NAME;
	if (userName.indexOf("@") != -1) {
		tenantDomain = userName.substring(userName.lastIndexOf('@') + 1);
	} else {	// else assume super tenant
		tenantDomain = SUPER_TENANT_DOMAIN_NAME;
	}
	log.debug("user logs in module called for user " + userName);
	var ws = require('ws');
	var finalResult={
	};
	var context=multitenancy.getPrivilegedCarbonContext();
 	var tenantManager= multitenancy.getTenantManager();
	var finalResult={};
	try{
        	context.startTenantFlow();
        	context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        	context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        	context.getThreadLocalCarbonContext().setUsername(userName);

		var result = server.Server.prototype.authenticate(userName,password);
		if(result === true){
			jagg.setUser(userName);
			finalResult.error="false";
			finalResult.message="User successfully logged in";
			finalResult.username=userName;
		}else{
			finalResult.error="true";
			finalResult.message="Authenitcation Failed.";
		}
		return stringify(finalResult);
	} catch(e){
		log.error("Error while authenticating user : " + userName);
		log.error(e);
		throw e;
	} finally {
	    context.endTenantFlow();
	}
}

function logout(){
    var log = new Log();
    var username = jagg.getUser();
    var finalResult={};

    if(username!=null){
        jagg.setUser(null)
         print(" error:false message:'User successfully logged out username:"+username);
	finalResult.error="false";
	finalResult.message="User successfully logged out";
       // print('error:false message:User successfully logged out');
	 return stringify(finalResult);
    }
	finalResult.error="true";
	finalResult.message="User already logged out";
        print('error:true message:already logged out');
	 return stringify(finalResult);

}

function validateUser(userName){
	var log = new Log();
    var ws = require('ws');

    var version = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.useWSA = 1.0;
    options.action = "urn:doesUserExist";
    modManager.setAuthHeaders(options);
    var payload = '<p:doesUserExist xmlns:p="http://services.registration.user.appfactory.carbon.wso2.org"><p:userName>'+userName+'</p:userName></p:doesUserExist>';
    var result;
    var endPoint = getProperty(APPFACTORY_SERVER_URL) + "UserRegistrationService";

    try {
    	version.open(options,endPoint, false);
    	version.send(payload);
    	result = version.responseE4X;
    	var ns=new Namespace("http://services.registration.user.appfactory.carbon.wso2.org");

    	result = result.ns::["return"].text();

    } catch (e) {
		log.error("Error when validating user : " + userName);
		log.error(e);
		throw e;
    }

    return result;
}


function getUserConfirmationObject(secreteKey) {
    try {
        var result = getConfirmationObject(secreteKey);
        var ax2342=new Namespace("http://util.verification.email.carbon.wso2.org/xsd");
        var ns=new Namespace("http://services.verification.email.carbon.wso2.org");
        var data=new XML(result.ns::["return"].ax2342::data+"");

        var confirmationObject=new Array();
        confirmationObject.admin=(data.admin.text());
        confirmationObject.email=data.email.text();
        confirmationObject.confirmationKey=data.confirmationKey.text();
        return confirmationObject;
    } catch(e) {
		log.error("Error while getting user confirmation object.");
		log.error(e);
		throw e;
    }
}

/*This method returns the users that contains the given part of text*/
function getAllUsersHavingName(userName) {
	if(getProperty(USER_SEARCH_STATUS) === "false"){
		return;
	}
    jagg.module("permission").checkUserAuthenticated();
	var ws = require("ws");
    var userAdmin = new ws.WSRequest();
    var options = new Array();
    
    options.useSOAP = 1.1;
    options.action = "urn:listUsers";
    modManager.setAuthHeaders(options);
 
    var payload = '<mgt:listUsers xmlns:mgt="http://mgt.user.carbon.wso2.org"><mgt:filter>' + userName + '</mgt:filter></mgt:listUsers>';
    var result;
     
   
    try {
    	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "UserAdmin";     
    	userAdmin.open(options,endPoint, false);
    	userAdmin.send(payload);
    	result = userAdmin.responseE4X;
    	var ns=new Namespace("http://mgt.user.carbon.wso2.org");
    	var elements = result.ns::["return"];
    	var elementsArray = new Array();
    	for(var i=0;i<elements.length();i++){
    		elementsArray.push(elements[i].text());
    	}
    	var userNames={};
    	userNames.usernames=elementsArray;
    	return userNames; 
    } catch (e) {
		log.error("Error while getting all users having name : " + userName);
		log.error(e);
		throw e;
    }
}

/*This method returns the roles for given user*/
function getAllRolesOfUser(userName) {

    jagg.module("permission").checkUserAuthenticated();
	var ws = require("ws");
    var userAdmin = new ws.WSRequest();
    var options = new Array();

    options.useSOAP = 1.1;
    options.action = "urn:getRolesOfUser";
    modManager.setAuthHeaders(options);

    var payload = '<mgt:getRolesOfUser xmlns:mgt="http://mgt.user.carbon.wso2.org"><mgt:userName>' + userName +'</mgt:userName></mgt:getRolesOfUser>';
    var result;


    try {
    	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "UserAdmin";
    	userAdmin.open(options,endPoint, false);
    	userAdmin.send(payload);
    	result = userAdmin.responseE4X;
    	var ns=new Namespace("http://mgt.user.carbon.wso2.org");
    	var elements = result.*::["return"];
    	var elementsArray = new Array();
    	for(var i=0;i<elements.length();i++){
    		var userRole = {};
    		var roleName = elements[i].*::itemName;
    		var isSelected = elements[i].*::selected;

    		userRole.roleName = roleName.text();
    		userRole.isSelected = isSelected.text();

    		elementsArray.push(userRole);
    	}

    	var userRoles={};
    	userRoles.userRoles=elementsArray;
    	return userRoles;
    } catch (e) {
		log.error("Error while getting all roles of user : " + userName);
		log.error(e);
		throw e;
    }
}


function getConfirmationObject(secreteKey) {
    var ws = require("ws");
    var emailVerificationService = new ws.WSRequest();
    var options = [];
    options.useSOAP = 1.2;
    options.action = "urn:confirmUser";
    modManager.setAuthHeaders(options);

    var payload = <ser:confirmUser xmlns:ser="http://services.verification.email.carbon.wso2.org"></ser:confirmUser>;
    var ser = new Namespace("http://services.verification.email.carbon.wso2.org");
    payload.ser::secretKey = secreteKey;
    var result;
    try {
    	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "EmailVerificationService";
    	emailVerificationService.open(options,endPoint, false);
    	emailVerificationService.send(payload);
    	result = emailVerificationService.responseE4X;
    	if (log.isDebugEnabled()) {
    		log.debug("Invoking service endpoint:" + endPoint + " returned result:" + result);
    	}
    	return result;
    } catch (e) {
		log.error("Error while getting confirmation object at email verification.");
		log.error(e);
		throw e;
    }
}

function getUserInfoBean(userName) {
   	var ws = require("ws");
    var userAdmin = new ws.WSRequest();
    var options = new Array();

    options.useSOAP = 1.1;
    options.action = "urn:getUserInfoBean";
    modManager.setAuthHeaders(options);
    var payload='<ser:getUserInfoBean xmlns:ser="http://service.mgt.application.appfactory.carbon.wso2.org"><ser:userName>'+userName+'</ser:userName></ser:getUserInfoBean>';
    var result;
    try {
    	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "ApplicationManagementService";
    	userAdmin.open(options,endPoint, false);
    	userAdmin.send(payload);
    	result = userAdmin.responseE4X;
    	var responseUsers = result.*::["return"];
    	var ruserName = responseUsers.*::userName;
        var ruserDisplayName=responseUsers.*::displayName;
        var Resuser={};
        Resuser.userName=ruserName.text();
        Resuser.displayName=ruserDisplayName.text();
        return Resuser;

    } catch (e) {
		log.error("Error while getting user info bean for user : " + userName);
		log.error(e);
		throw e;
    }
}

function getCookieForCloudMgtBySAMLToken(){
	if(log.isDebugEnabled()){
		log.debug("login with saml token for user: "+jagg.getUser());
	}
	var loginUrl = getProperty(CLOUDMGT_SERVER_URL)+"/"+CLOUDMGT_LOGIN_AJAX_PATH;
	var data = {
		action: "loginWithSAMLToken",
		samlToken: session.get("SAML_TOKEN")
	};
	var headers = {"Content-Type":"application/x-www-form-urlencoded"};
	var type = "json";
	var result;
	try {
		result = post(loginUrl, data, headers, type);
	} catch(e) {
		log.error("Error occurred when login with saml token for user:"+jagg.getUser()
				  +". Authentication failure.");
		log.error(e);
		throw "Error occurred when login with saml token";
	}

	if(result.xhr.status == "200") {
        var route = null, jsession = null;
        var headers = result.xhr.getAllResponseHeaders();
        var fullCookie = "";
        if (headers) {
            var nginxIndex = headers.indexOf("route");
            if(nginxIndex && nginxIndex > 0) {
                var nginX = headers.substring(nginxIndex);
                route = nginX.substring(0, nginX.indexOf(";"));
            }
            var sessionIdIndex = headers.indexOf("JSESSIONID");
            if (sessionIdIndex && sessionIdIndex > 0) {
                var carbonServer = headers.substring(sessionIdIndex);
                jsession = carbonServer.substring(0,carbonServer.indexOf(";"));
            }
            if (jsession) {
                fullCookie += jsession;
            }
            if(route) {
                fullCookie += ";" + route;
            }
        }
        return fullCookie;
	} else {
		log.error("Error occurred when login with saml token for user:"+jagg.getUser()
				  +". Server response status:"+result.xhr.status+". responseText: "+ result.xhr.responseText);
		throw "Error occurred when login with saml token";
	}
}

%>
