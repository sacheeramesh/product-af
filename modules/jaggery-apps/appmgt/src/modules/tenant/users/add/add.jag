<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log('modules/tenant/users/add/add.jag');

var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var appfactory = require('appFactory');
var multitenancy = carbon.multitenancy;
var modUser = jagg.module("user");

//var appfactory = require('appFactory');
//var multitenancy = carbon.multitenancy;
//var server = require('/modules/server.js');

/*Add user to the tenant domain with a particlualr role*/
var addRolestoUserinTenantDomain = function addUserToTenantDomain(requestersUsername,username,userRole) {

  /*  var tenantDomain=session.get("APPLICATION_INFO").tenantDomain;
    var userManager = server.userManager(server,tenantDomain);
    var user=userManager.getUser(username);
    user.addRoles(userRole);
    */

};

var updateUserRoles = function updateUserRoles(userName,newRoles,removeRoles) {
    var cookieString = modUser.getCookieForCloudMgtBySAMLToken();
    if (log.isDebugEnabled()) {
        log.debug("Updating user roles of user: " + userName
                  +". New user roles:"+newRoles.join(", ")
                  +" .Removed Roles: "+removeRoles.join(", "));
    }

    var updateUserRoleUrl = getProperty(CLOUDMGT_SERVER_URL) + "/" + CLOUDMGT_UPDATE_USER_ROLES_AJAX_PATH;
    var data = {
        action: "updateUserRoles",
        rolesToAdd: newRoles.toString(),
        rolesToDelete : removeRoles.toString(),
        userName: userName
    };
    var headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Cookie": cookieString
    };
    var type = "json";
    var result = post(updateUserRoleUrl, data, headers, type);
    if (result.xhr.status == "200") {
        log.info("Successfully updated the user roles of user:"+userName);
    } else {
        log.error("Error occurred while updating roles of user:"+userName
                  +". New user roles:"+newRoles.join(", ")
                  +" .Removed Roles: "+removeRoles.join(", ")
                  +". Server response status:" + result.xhr.status + ". responseText" + result.xhr.responseText);
        throw "Error occurred while updating roles of user:"+userName;
    }
};

var deleteUserFromTenant = function deleteUserFromTenant(userName){
    var isSuccess = "false";
    isSuccess = server.osgiService('org.wso2.carbon.appfactory.tenant.mgt.service.TenantManagementService')
                                    .removeUserFromTenant(userName);
    return isSuccess;

}

var bulkUserImport = function bulkUserImport(users,defaultPassword){
    var isSuccess = "false";
    isSuccess = server.osgiService('org.wso2.carbon.appfactory.tenant.mgt.service.TenantManagementService')
                                    .importUsersTotheTenant(users,defaultPassword);
    return isSuccess;
}

var changePassword=function(oldPassword,newPassword){
    var user=jagg.getUser().split('@')[0];
    var tenantDomain=modManager.getTenantDomain();
    var tenantManager = multitenancy.getTenantManager();
    try {
        var tenantId = tenantManager.getTenantId(tenantDomain);
        var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
        var realm = realmService.getTenantUserRealm(tenantId);
        var userStoreManager=realm.getUserStoreManager();
        var result=userStoreManager.updateCredential(user,newPassword,oldPassword);
        var claimValue=userStoreManager.setUserClaimValue(user,"http://wso2.org/claims/firstlogin","false",null);

    }catch (e){
        log.error("Error occurred while changing password for the user : " + user + " of tenant domain : "
                  + tenantDomain);
        log.error(e);
        throw e;
    }
};

var addUsersToTenant = function (applicationKey, usersList, welcomeText) {
    var cookieString = modUser.getCookieForCloudMgtBySAMLToken();
    var tenantDomain = modManager.getTenantDomain();
    if (log.isDebugEnabled()) {
        log.debug("Adding  users to tenant: " + tenantDomain);
        log.debug("Users list: " + stringify(usersList));
    }
    var AppFactoryUtil = Packages.org.wso2.carbon.appfactory.common.util.AppFactoryUtil;
    var defaultAppRole = AppFactoryUtil.getRoleNameForApplication(applicationKey);
    var addTenantUsersUrl = getProperty(CLOUDMGT_SERVER_URL) + "/" + CLOUDMGT_ADD_TENANT_USERS_AJAX_PATH;
    var defaultRoleObject = [{"id":defaultAppRole}];
    var data = {
        action: "inviteUsers",
        defaultRoles: stringify(defaultRoleObject),
        userRoleList: stringify(usersList),
        message: welcomeText
    };
    var headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Cookie": cookieString
    };
    var type = "json";
    var result = post(addTenantUsersUrl, data, headers, type);
    if (result.xhr.status == "200") {
        log.info("Successfully added users to tenant: " + tenantDomain + ", for application: " + applicationKey);
    } else {
        log.error("Error occurred when adding users to tenant:" + tenantDomain + ", for application: " + applicationKey
                  +". Server response status:" + result.xhr.status + ". responseText" + result.xhr.responseText);
        throw "Error occurred when adding users of tenant";
    }
};

var resendInvitation = function (applicationKey, email) {
    var cookieString = modUser.getCookieForCloudMgtBySAMLToken();
    var tenantDomain = modManager.getTenantDomain();
    if (log.isDebugEnabled()) {
        log.debug("Resending invitation to user: " + email+" for tenant: "+tenantDomain);
    }

    // TODO: update CLOUDMGT_ADD_TENANT_USERS_AJAX_PATH
    var resendInvitationUrl = getProperty(CLOUDMGT_SERVER_URL) + "/" + CLOUDMGT_RESEND_INVITATION_AJAX_PATH;
    var data = {
        action: "resendInvite",
        email: email
    };
    var headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Cookie": cookieString
    };
    var type = "json";
    var result = post(resendInvitationUrl, data, headers, type);
    if (result.xhr.status == "200") {
        log.info("Successfully resent user invitation to user:"+email
                 +", tenant: " + tenantDomain + ", for application: "+ applicationKey);
    } else {
        log.error("Error occurred when resending invitation to user:"+email
                  +" tenant:" + tenantDomain + ", for application: " + applicationKey
                  +". Server response status:" + result.xhr.status + ". responseText" + result.xhr.responseText);
        throw "Error occurred when resending invitation";
    }
};


%>

