<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
include("/jagg/util.jag");

var log = new Log('modules/tenant/users/get/get.jag');

var modManager = jagg.module("manager");
var modUser = jagg.module("user");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;

var getUserInfo = function getUserInfo(userName) {
//    jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_USER_INVITE);
    var ws = require('ws');
    var request = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.timeout = 1000000;
    options.action = "urn:getUserInfo";
    modManager.setAuthHeaders(options);

    var payload = '<p:getUserInfo xmlns:p="http://service.mgt.tenant.appfactory.carbon.wso2.org"><p:userName>'+userName+'</p:userName></p:getUserInfo>';
    var tmpUser={};
    try {
    	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "TenantManagementService/getUsersofTenant";
    	request.open(options,endPoint, false);
    	request.send(payload);
    	result = request.responseE4X;
        var ns=new Namespace("http://service.mgt.tenant.appfactory.carbon.wso2.org");
        var user = result.ns::["return"];
        var tmpuserName=user.*::["userName"];

        if(tmpuserName.length()==0){
        	return null;
        }

        var tmpemail=user.*::["email"];
        var tmpdisplayName=user.*::["displayName"];
        var tmpfirstName=user.*::["firstName"];
        var tmplastName=user.*::["lastName"];
        var tmproles=user.*::["roles"];
        tmpUser.userName=tmpuserName.text();
        var userName=tmpuserName.text();
        tmpUser.email=tmpemail.text();
        tmpUser.displayName=tmpdisplayName.text();
        tmpUser.firstName=tmpfirstName.text();
        tmpUser.lastName=tmplastName.text();
        tmpUser.roles=tmproles.text();
        var tempRoles=tmpUser.roles;
        tmpUser.displayRoles=[];
        for(var tempRole in tempRoles){
            tmpUser.displayRoles.push(getProperty("TenantRoles.Role." + tempRoles[tempRole] + ".DisplayName"));
        }

       	if(log.isDebugEnabled()){
    		log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
    	}
    	 }
    catch (e) {
        log.error("Error while retrieving info of user : " + userName);
        log.error(e);
        throw e;
    }
    return tmpUser;
};

var getUserRoles = function(userName){
    try {
        var tenantManagementService = server.osgiService('org.wso2.carbon.appfactory.tenant.mgt.service.TenantManagementService');
        var roles = tenantManagementService.getFilteredUserRoles(userName);
        return roles;
    }catch (e){
        log.error("Error occurred while checking first login status of user : " + user + " of tenant domain : "
                  + tenantDomain);
        log.error(e);
        throw e;
    }
}

var isFirstLogin=function(){
    var user=jagg.getUser().split('@')[0];
    var tenantDomain=modManager.getTenantDomain();
    var tenantManager = multitenancy.getTenantManager();
    try {
        var tenantId = tenantManager.getTenantId(tenantDomain);
        var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
        var realm = realmService.getTenantUserRealm(tenantId);
        var userStoreManager=realm.getUserStoreManager();
        var claimValue=userStoreManager.getUserClaimValue(user,FIRST_LOGIN_CLAIM,null);
        return claimValue;
    }catch (e){
        log.error("Error occurred while checking first login status of user : " + user + " of tenant domain : "
                  + tenantDomain);
        log.error(e);
        throw e;
    }
}

var getApplicatioinKeysOfUser=function(userName){
       var appsOfUser;
       appsOfUser = server.osgiService('org.wso2.carbon.appfactory.application.mgt.service.ApplicationInfoService').
                                                getApplicationKeysOfUser(userName);
       return appsOfUser;
};

var getUsersOfTenant = function(){
    var cookieString = modUser.getCookieForCloudMgtBySAMLToken();
    var tenantDomain = modManager.getTenantDomain();
    if(log.isDebugEnabled()){
        log.debug("Getting users of tenants for tenant: "+tenantDomain);
    }
    var tenantUsersUrl = getProperty(CLOUDMGT_SERVER_URL)+"/"+CLOUDMGT_TENANT_USERS_AJAX_PATH;
    var data = {
        action: "getUsersOfTenantByCloudType",
        tenantDomain: tenantDomain,
        cloudType:CLOUD_TYPE_AF
    };
    var headers = {
        "Content-Type":"application/x-www-form-urlencoded",
        "Cookie": cookieString
    };
    var type = "json";
    var result = post(tenantUsersUrl, data, headers, type);
    if(result.xhr.status == "200"){
        return convertTenantUsersArrayForDisplay(result.data);
    } else {
        log.error("Error occurred when getting users of tenant:"+tenantDomain
                  +". Server response status:"+result.xhr.status+". responseText"+ result.xhr.responseText);
        throw "Error occurred when getting users of tenant";
    }
};

var getPendingUsersOfTenantByAppKey = function(applicationKey){
    var cookieString = modUser.getCookieForCloudMgtBySAMLToken();
    var tenantDomain = modManager.getTenantDomain();
    if(log.isDebugEnabled()){
        log.debug("Getting users of tenants for tenant: "+tenantDomain);
    }
    var tenantUsersUrl = getProperty(CLOUDMGT_SERVER_URL)+"/"+CLOUDMGT_PENDING_TENANT_USERS_AJAX_PATH;
    var AppFactoryUtil = Packages.org.wso2.carbon.appfactory.common.util.AppFactoryUtil;
    var appRole = AppFactoryUtil.getRoleNameForApplication(applicationKey);
    var data = {
        action: "getPendingUsersOfRole",
        tenantDomain: tenantDomain,
        role: appRole
    };
    var headers = {
        "Content-Type":"application/x-www-form-urlencoded",
        "Cookie": cookieString
    };
    var type = "json";
    var result = post(tenantUsersUrl, data, headers, type);
    if(result.xhr.status == "200"){
        return (result.data);
    } else {
        log.error("Error occurred when getting pending users of tenant:"+tenantDomain 
                  +" for application: " + applicationKey +
                  +". Server response status:"+result.xhr.status+". responseText"+ result.xhr.responseText);
        throw "Error occurred when getting pending users of tenant";
    }
};

function convertTenantUsersArrayForDisplay(users){
    var returnUsersArray = [];
    for(var i = 0, len = users.length; i < len; i++){
        var user = users[i];
        var tempUser = {};
        tempUser["email"] = user.email;
        tempUser["userName"] = user.userName;
        tempUser["id"] = tempUser["email"];
        tempUser["displayName"] = user.displayName;
        tempUser["text"] = tempUser["displayName"];
        var displayRoles=[];
        var roles = (user.roleTypes);
        if(roles) {
            for (var j = 0; j < roles.length; j++) {
                displayRoles.push(roles[j]["displayName"]);
            }
        }
        tempUser["role"] = displayRoles;
        returnUsersArray.push(tempUser);
    }
    return returnUsersArray;
}

function getAllUserDisplayRoles(){

    var allAfRoles = application.get(ALL_AF_ROLES);
    if(isEmpty(allAfRoles)){
        // TODO: get this from cloudmgt
        allAfRoles = [
            {
                role:'developer',
                displayName:'Developer'
            },
            {
                role:'devops',
                displayName:'DevOps'
            },
            {
                role:'qa',
                displayName:'QA'
            },
            {
                role:'appowner',
                displayName:'Application Owner'
            },
            {
                role:'cxo',
                displayName:'CXO'
            }
        ];
        application.put(ALL_AF_ROLES, allAfRoles);
    }
    return allAfRoles;
}


%>
